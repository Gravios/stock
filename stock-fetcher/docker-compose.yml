

services:
  stockdb:
    image: postgres:16
    environment:
      - POSTGRES_DB=${STOCKDB_DB}
      - POSTGRES_HOST=${STOCKDB_HOST}
      - POSTGRES_USER=${STOCKDB_USER}
      - POSTGRES_PASSWORD=${STOCKDB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth=trust
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./stockdb_init.sql:/docker-entrypoint-initdb.d/stockdb_init.sql
    ports:
      - "${STOCKDB_PORT}:${STOCKDB_PORT}"

  authdb:
    image: postgres:16
    environment:
      - POSTGRES_DB=${AUTHDB_DB}
      - POSTGRES_HOST=${AUTHDB_HOST}
      - POSTGRES_USER=${AUTHDB_USER}
      - POSTGRES_PASSWORD=${AUTHDB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth=trust
    volumes:
      - authdb:/var/lib/postgresql/data
      - ./authdb_init.sql:/docker-entrypoint-initdb.d/authdb_init.sql
    ports:
      - "${AUTHDB_PORT}:${AUTHDB_PORT}"

  auth-backend:
    build:
      context: ./auth-backend
      dockerfile: Dockerfile
    ports:
      - "${AUTH_BACKEND_PORT}:${AUTH_BACKEND_PORT}"
    depends_on:
      - authdb
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - AUTHDB_HOST=${AUTHDB_HOST}
      - AUTHDB_DB=${AUTHDB_DB}
      - AUTHDB_USER=${AUTHDB_USER}
      - AUTHDB_PASSWORD=${AUTHDB_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JTW_ALGORITHM=${JTW_ALGORITHM}
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${JTW_ACCESS_TOKEN_EXPIRE_MINUTES}

  fetcher:
    build: ./fetcher
    ports:
      - "${FETCHER_PORT}:${FETCHER_PORT}"
    depends_on:
      - stockdb
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - STOCKDB_HOST=${STOCKDB_HOST}
      - STOCKDB_DB=${STOCKDB_DB}
      - STOCKDB_USER=${STOCKDB_USER}
      - STOCKDB_PASSWORD=${STOCKDB_PASSWORD}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: yarn dev --host 0.0.0.0
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    stdin_open: true
    tty: true
    depends_on:
      - fetcher

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile

    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      - frontend
      - fetcher

volumes:
  pgdata:
  authdb:
